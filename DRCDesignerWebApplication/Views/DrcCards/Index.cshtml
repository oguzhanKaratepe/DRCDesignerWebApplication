@using DRCDesignerWebApplication.ViewModels
@using Microsoft.CodeAnalysis.CSharp
@using Microsoft.EntityFrameworkCore
@model DRCDesignerWebApplication.ViewModels.DrcCardContainerViewModel;

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = "_CardPageLayout";
}

<style>

    #AddButton2 {
        font-size: 10px;
        margin-top: 2px;
        background-color: lightgray;
    }

    #AddButton1 {
        font-size: 10px;
        margin-top: 2px;
        background-color: lightgray;
        /*min-width: 90px;*/
        /*margin-left: 35px;*/
    }

    .buttonGroupOfCard1 {
        display: flex;
        justify-content: flex-start;
        flex-direction: column;
        margin-left: -7px;
        border-bottom: solid 2px lightgray;
        border-top: solid 2px lightgray;
        border-radius: 4px;
        height: 118px;
        margin-top: 7px;
    }

    .Card-delete {
        display: flex;
        justify-content: flex-end;
    }

    .caption {
        font-size: 16px;
        padding-bottom: 3px;
        padding-left: 10px;
    }

    .container-fluid .card {
        max-width: 500px;
    }

    .container-fluid {
        margin-left: 15px;
        display: flex;
        flex-wrap: wrap;
        min-height: 300px;
    }

        .container-fluid .card .card-footer {
            display: flex;
            flex-flow: row wrap;
        }

        .container-fluid .card-deck {
            display: flex;
            align-items: flex-start;
            align-content: flex-start;
            flex-wrap: wrap;
        }

        .container-fluid .card .card-body {
            display: flex;
            flex-flow: row wrap;
            flex-direction: column;
        }

        .container-fluid .card .card-footer > div {
            margin: 5px;
        }

        .container-fluid .card .card-body > div {
            margin: 5px;
        }

    .card-header {
        height: 60px;
    }

    h5 {
        font-size: 17px;
        font-family: "Roboto", "RobotoFallback", "Helvetica", "Arial", sans-serif;
        font-weight: normal;
        color: rgba(0, 0, 0, 0.87);
    }
    .mybtngroup {
        margin-left: -20px;
        margin-top: -20px;
    }
    .btn-circle {
        width: 45px;
        height: 45px;
        line-height: 45px;
        text-align: center;
        padding: 0;
        border-radius: 50%;
    }
    .btn-circle-sm {
        width: 35px;
        height: 35px;
        line-height: 35px;
        font-size: 0.9rem;
    }

    .dropdown-item:active {
        background-color:#545b62;
        color: #fff;
    }
</style>

<div class="container-fluid">


<div class="d-flex flex-column align-items-start m-3">
@{
    <div id="FirstPartialView">@Html.Partial("AddCardPartialView", Model.DrcCardViewModel)</div>
    <div id="secondpartialview">@Html.Partial("AddShadowCardPartialView", Model.DrcCardViewModel)</div>
}
@{

    if (Model.TotalSubdomainSize > 0 && Model.DrcCardViewModel.SubdomainId != 0)
    {
        <div class="mybtngroup" role="group">
            <button id="btnGroupDrop1" class="btn btn-secondary btn-circle btn-circle-sm m-1" data-toggle="dropdown"><i class="fa fa-plus"></i></button>
            <div class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                <a class="dropdown-item" onclick="AddClickHandler();">Drc Document</a>
                <a class="dropdown-item" onclick="shadowCardPopUp();">Shadow Document</a>
            </div>
        </div>

    }

    else if (Model.TotalSubdomainSize < 1)
    {
        <p class="alert-light text-lg-center align-content-center" id="addSubdomainAlert">To be able start design, you must start by adding a new subdomain to your project.. </p>

    }
}
<div class="card-deck d-flex flex-wrap align-self-start ">


</div>
@foreach (var property in Model.DrcCardViewModes)
{
    Model.DrcCardViewModel = property;
    <div class="d-flex">
    <div class="card border-secondary  mb-3 mr-2 mt-2" style="min-width: 20rem;">
    @if (property.MainCardId != null)
    {

        <div class="card-header text-white bg-secondary border-secondary d-flex justify-content-between ">
            <div>
                <h5> @property.DrcCardName</h5>
            </div>

        </div>

    }
    else
    {
        <div class="card-header bg-success border-secondary d-flex justify-content-between">

            <h5> @property.DrcCardName</h5>

            @*@(Html.DevExtreme().Button().ID(@property.Id.ToString()).Icon("menu"))*@

        </div>

    }

    <div class="card-body  bg-light d-flex flex-row p-0" style="min-height: 10rem">

        <div class="bd-highlight  bg-light border-right" style="flex: 5">


            @foreach (var responsibility in property.Responsibilities)
            {

                <div>

                    @if (@responsibility.IsMandatory == true)
                    {<a class="text-danger">!</a>
                        <a id="@("house" + responsibility.Id)">
                            @responsibility.Title
                        </a>

                    }
                    else
                    {
                        <a>&nbsp;</a>
                        <a id="@("house" + responsibility.Id)">
                            @responsibility.Title
                        </a>
                    }

                </div>
                @(Html.DevExtreme().Popover()
                      .Target("#house" + responsibility.Id)
                      .ShowEvent("mouseenter")
                      .HideEvent("mouseleave").Width(280)
                      .ContentTemplate(@<text>
                                           <h6>Responsibility Definition:</h6>
                                           <span> @responsibility.ResponsibilityDefinition </span>
                                           <h6>Priority Order:</h6>
                                           <span> @responsibility.PriorityOrder</span>
                                           @if (@responsibility.ResponsibilityCollaborationCards.Count > 0)
                                           {
                                               <h6> Collaboration Cards:</h6>
                                               @string.Join(", ", @responsibility.ResponsibilityCollaborationCards.Select(m => m.DrcCardName))
                                           }





                                        </text>)
                      .Position(a => a
                          .At(HorizontalAlignment.Center, VerticalAlignment.Bottom)
                          .My(HorizontalAlignment.Left, VerticalAlignment.Top)
                          .Collision(PositionResolveCollision.Fit, PositionResolveCollision.Flip)
                          .Offset(0, 2)
                      )
                      )





            }

        </div>
        <div class="bd-highlight  bg-light border-right " style="flex: 2.5">
            @foreach (var Authorization in property.Authorizations)
            {
                <div>
                    <div>@Authorization.OperationName (<a class="small">@string.Join(", ", Authorization.Roles.Select(r => r.RoleName))</a>)</div>
                </div>
            }
        </div>
        <div class="bd-highlight  bg-light border-right " style="flex: 3">
            @{
                var cardContainer = new List<DrcCard>();
                @foreach (var responsibility in property.Responsibilities)
                 {

                     foreach (var collaboration in responsibility.ResponsibilityCollaborationCards)
                     {
                         if (!cardContainer.Contains(collaboration))
                         {
                             cardContainer.Add(collaboration);
                         }
                     }

                 }
                @foreach (var field in property.Fields)
                 {
                     if (!cardContainer.Contains(field.CollaborationCard) && field.CollaborationCard != null)
                     {
                         cardContainer.Add(field.CollaborationCard);
                     }
                 }
                foreach (var card in cardContainer)
                {
                    <div>@card.DrcCardName</div>
                }
            }
        </div>

    </div>


    <div id="card-footer" class="card-footer bg-light d-flex align-content-start flex-wrap">


        @foreach (var field in property.Fields)
        {
            <div id="@("field" + field.Id)" class="border border-dark rounded p-1 m-1">


                @field.AttributeName

            </div>


            @(Html.DevExtreme().Popover()
                  .Target("#field" + field.Id)
                  .ShowEvent("mouseenter")
                  .HideEvent("mouseleave")
                  .Position(Position.Bottom)
                  .Width(270)
                  .ContentTemplate(@<text>
                                       <h6>@field.Type</h6>
                                       @if (@field.CollaborationCard != null)
                                       {
                                           <h6> Collaboration Card:</h6>
                                           <span>@field.CollaborationCard.DrcCardName</span>
                                       }
                                    </text>))
        }

    </div>




    @using (Html.DevExtreme().NamedTemplate("Update-popup-template" + property.Id))
    {
        Model.DrcCardViewModel = property;
        @(Html.DevExtreme().Form<DrcCardViewModel>()
              .FormData(Model.DrcCardViewModel)
              .Items(formItems =>
              {
                  formItems.AddSimple().Template(@<text> @Html.Partial("PartialCardNameGrid", property)
                                                  </text>);
                  formItems.AddGroup()
                      .Items(groupItem =>
                      {
                          groupItem.AddTabbed().TabPanelOptions(o =>
                          {
                              o.DeferRendering(false);
                              o.Height(570);
                              o.AnimationEnabled(true);
                          }).Tabs(tabItem =>
                          {
                              tabItem.Add().Title("RESPONSIBILITIES").Template(@<text>@Html.Partial("ResponsibilityUpdatePartial", property)</text>);
                              tabItem.Add().Title("AUTHORIZATIONS").Template(@<text>@Html.Partial("AuthorizationDataGridUpdate", property)</text>);
                              tabItem.Add().Title("FIELDS").Template(@<text>
                                                                         @Html.Partial("FieldDataGridUpdatePartialView", property)
                                                                      </text>);

                          });
                      });

              })

              )

        <script>
            function onEditorPreparing(e) {
                if (e.parentType === "dataRow" && e.dataField === "DrcCardId") {
                    e.editorOptions.disabled = (typeof e.row.data.Type !== "number");
                }
            }


            function getCollaborationCards(options) {
                return {
                    store: DevExpress.data.AspNet.createStore({
                        key: "Id",
                        loadUrl:
                            '@Url.Action("GetCollaborations", "Fields", new {Id = @property.SubdomainId, cardId = @property.Id})'
                    })

                };
            }

            function setTypeValue(rowData, value) {
                rowData.Type = value;
            }

            function customizeAuthorizationDisplayText(cell, info) {
                var rowData = info.row.data;
                if (!rowData)
                    return;
                var texts = [];
                if (rowData.RoleIds && rowData.RoleIds.length) {
                    for (var i = 0; i < rowData.RoleIds.length; i++) {
                        var value = rowData.RoleIds[i];
                        var displayText = info.column.lookup.calculateCellValue(value);

                        if (displayText)
                            texts.push(displayText);
                    }
                }
                cell.append(texts.toString());

            };

            function customizeDisplayText(cell, info) {
                var rowData = info.row.data;

                if (!rowData)
                    return;
                var texts = [];
                if (rowData.ShadowCardIds && rowData.ShadowCardIds.length) {
                    for (var i = 0; i < rowData.ShadowCardIds.length; i++) {
                        var value = rowData.ShadowCardIds[i];
                        var displayText = info.column.lookup.calculateCellValue(value);
                        if (displayText)
                            texts.push(displayText);
                    }
                }
                cell.append(texts.toString());
            };

            function getDrcId() {
                return @property.Id;
            }


            function onRowInserting(e) {
                e.data.DrcCardId = @property.Id;
            }


        </script>


    }
    @using (Html.DevExtreme().NamedTemplate("Delete-popup-template" + property.Id))
    {
        Model.DrcCardViewModel = property;
        @using (Html.BeginForm("Delete", "DrcCards", FormMethod.Post))
         {
             <div class=" d-flex align-items-top flex-column mt-auto">
                 @if (Model.DrcCardViewModel.MainCardId != null)
                 {
                     <div class="d-flex alert alert-primary" role="alert">
                         *This is a Shadow Card. If you delete this card then you will lose all relations with this card!
                     </div>

                 }
                 @Html.HiddenFor(m => m.DrcCardViewModel.SubdomainId)
                 @Html.HiddenFor(m => m.DrcCardViewModel.Id)
                 @Html.HiddenFor(m => m.DrcCardViewModel.MainCardId)
                 @(Html.DevExtreme().Form<DrcCardContainerViewModel>()
                       .FormData(Model)
                       .ID("form")
                       .ColCount(2)
                       .Items(formItems =>
                       {
                           formItems.AddSimpleFor(m => m.DrcCardViewModel.DrcCardName).Editor(e => e.TextBox().Disabled(true));

                       }).ValidationGroup("card")
                       )
             </div>
             // Validates the "employee" validation group and submits the "editEmployee" HTML form
             <div class="CloseButton d-flex align-items-end flex-column mt-auto">
                 @(Html.DevExtreme().Button()
                       .Text("Delete")
                       .ValidationGroup("card")
                       .UseSubmitBehavior(true)
                       )
             </div>

         }

    }

    </div>

    <div class="buttonGroupOfCard1 border-secondary" id="@property.Id">

        @(Html.DevExtreme().Button()
              .Icon("edit")
              .Width(15)
              .Hint("Edit")
              .OnClick(@<text>
                           function showInfo(data) {
                           var popup = $("#Card-popup").dxPopup("instance");
                           popup.option("contentTemplate", $("#Update-popup-template"+ @property.Id));
                           popup.show();
                           }
                        </text>)
              )
        @(Html.DevExtreme().Button()
              .Icon("trash")
              .Hint("Delete")
              .Width(20).OnClick(@<text>
                                     function showInfo(data) {
                                     var popup = $("#Card-delete-popup").dxPopup("instance");
                                     popup.option("contentTemplate", $("#Delete-popup-template"+ @property.Id));
                                     popup.show();
                                     }
                                  </text>)
              )
        @(Html.DevExtreme().DropDownButton()
              .Icon("chevrondoubleright")
              .Width(10)
              .StylingMode(ButtonStylingMode.Text)
              .DisplayExpr("SubdomainName")
              .KeyExpr("Id")
              .Hint("Move Document")
              .DropDownOptions(options => options.Width(270))
              .DataSource(d => d.Mvc()
                  .Controller("Subdomains")
                  .LoadAction("GetDropDownButtonSubdomains")
                  .Key("Id").LoadParams(new {Id = @property.SubdomainId})
              ).OnItemClick(@<text>
                                function postSelectedItem(e) {
                                var r = confirm("Do you really want to do this action!");
                                if (r) {
                                $.ajax({
                                url:'@Url.Action("MoveCardToDestinationSubdomain", "DrcCards")',
                                type: 'POST',
                                data:{
                                destinationId: e.itemData.Id,
                                cardId: @property.Id
                                },
                                dataType: "application/json",

                                success: function (result) {
                                location.reload();

                                },
                                error: function (result) {
                                location.reload();
                                console.log(JSON.stringify(result,null,4));
                                }
                                });
                                }

                                }
                             </text>)
              )



    </div>

    </div>
}

</div>


</div>
</div>



@(Html.DevExtreme().Popup()
                          .ID("Card-popup")
                          .ElementAttr("class", "popup")
                          .TitleTemplate(@<text>
                            <div class="long-title"><h3>Update Card</h3></div>
                            <div class="CloseButton">
                                @(Html.DevExtreme().Button().Icon("close").OnClick("closeButton"))
                            </div>
                        </text>)
                                                                          .Width(750)
                                                                          .Height(700)
                                                                          .ShowTitle(true)
                                                                          .Visible(false)
                                                                          .DragEnabled(true)
                                                                          .CloseOnOutsideClick(false)
                                                                          .CloseOnBackButton(true)
                                                                          .ShowCloseButton(true)
)

@(Html.DevExtreme().Popup()
                          .ID("Card-delete-popup")
                          .ElementAttr("class", "popup")
                          .Width(500)
                          .Height(310)
                          .ShowTitle(true)
                          .Title("Do you want to delete this Item?")
                          .Visible(false)
                          .DragEnabled(true)
                          .CloseOnOutsideClick(false)
                          .CloseOnBackButton(true)
                          .ShowCloseButton(true)
)
@(Html.DevExtreme().Popover()
              .ID("more-option")
              .ElementAttr("class", "popup")
              .Width(80)
              .Height(120)
              .CloseOnOutsideClick(false)
              .CloseOnBackButton(true)
              .ShowCloseButton(true)
)

<script>
 
    function closeButton() {

        $("#Card-popup").dxPopup({
            visible: false

        });
        location.reload();
    }



</script>