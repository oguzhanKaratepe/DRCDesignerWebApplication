@using DevExtreme.AspNet.Mvc.Builders
@using DRCDesigner.Business.BusinessModels
@using DRCDesignerWebApplication.ViewModels
@using Microsoft.CodeAnalysis.CSharp
@using Microsoft.EntityFrameworkCore
@model DRCDesignerWebApplication.ViewModels.DrcCardContainerViewModel;

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = "_Layout";
}
<style>


    .Card-delete {
        display: flex;
        justify-content: flex-end;
    }

    .caption {
        font-size: 16px;
        padding-bottom: 3px;
        padding-left: 10px;
    }

    .container-fluid .card {
        max-width: 500px;
    }

    .container-fluid {
        display: flex;
        flex-wrap: wrap;
        min-height: 300px;
    }

        .container-fluid .card .card-footer {
            display: flex;
            flex-flow: row wrap;
        }

        .container-fluid .card-deck {
            display: flex;
            align-items: flex-start;
            align-content: flex-start;
            flex-wrap: wrap;
        }

        .container-fluid .card .card-body {
            display: flex;
            flex-flow: row wrap;
            flex-direction: column;
        }

        .container-fluid .card .card-footer > div {
            margin: 5px;
        }

    .card-header {
        height: 60px;
    }

   

    .btn-circle {
        width: 50px;
        height: 50px;
        line-height: 45px;
        text-align: center;
        padding: 0;
        border-radius: 50%;
    }

    .card.border-secondary.mb-3.mr-2.mt-2:hover {
        border-color: red !important;
    }

    .btn-circle-sm {
        width: 40px;
        height: 40px;
        line-height: 35px;
        font-size: 1.5rem;
        font-weight: bold;
    }

    .btn-circle-xsm {
        width: 35px;
        height: 35px;
        line-height: 30px;
        font-size: 1.5rem;
        font-weight: bold;
    }

    .container-fluid {
        padding-left: 0px;
        padding-right: 0px;
    }

    #shadowcardheader {
        background-color: #808080;
    }
    .shadowcardheader {
        background-color: #808080;
    }
    #addSubdomainAlert {
        margin-top: 280px;
        margin-left:160px;
    }


    .dxeFocused_MetropolisBlue {
        padding: 1px 3px 2px 3px;
        outline: none;
        border-color: darkgreen !important;
        box-shadow: 0 0 10px darkgreen !important;
    }

    a.wordwrap {
        word-wrap: break-word;
    }

    .dropdown-submenu {
        position: relative;
    }

        .dropdown-submenu > .dropdown-menu {
            top: 0;
            left: 100%;
            margin-top: -6px;
            margin-left: -1px;
            -webkit-border-radius: 0 6px 6px 6px;
            -moz-border-radius: 0 6px 6px;
            border-radius: 0 6px 6px 6px;
        }

        .dropdown-submenu:hover > .dropdown-menu {
            display: block;
        }

        .dropdown-submenu > a:after {
            display: block;
            content: " ";
            float: right;
            width: 0;
            height: 0;
            border-color: transparent;
            border-style: solid;
            border-width: 5px 0 5px 5px;
            border-left-color: #ccc;
            margin-top: 5px;
            margin-right: -10px;
        }

        .dropdown-submenu:hover > a:after {
            border-left-color: #fff;
        }

        .dropdown-submenu.pull-left {
            float: none;
        }

            .dropdown-submenu.pull-left > .dropdown-menu {
                left: -100%;
                margin-left: 10px;
                -webkit-border-radius: 6px 0 6px 6px;
                -moz-border-radius: 6px 0 6px 6px;
                border-radius: 6px 0 6px 6px;
            }

    .cursor-pointer {
        cursor: pointer;
    }
    
    .dropdown-item.active, .dropdown-item:active {
        color: #f8f9fa !important;
        background: #9c27b0 !important;
    }
</style>
<script>
    var rowKey = -1;
    var selectedType = null;
    var InitNewRowStarted = false;;
    function onInitNewRow(e) {
        InitNewRowStarted = true;

    }
    function onEditingStart(e) {
        InitNewRowStarted = false;
        rowKey = e.key;
    }
    function hidingpopup(e) {

        selectedType = null;
    }
    function ValueChanged(e) {
        selectedType=e.selectedItem.Name;
    }

    function customizeItem(item) {
        
        if (selectedType === null || InitNewRowStarted) {
            if ((item && item.itemType === "group")) {
                item.visible = false;
            } 
        }
      
        if ((item && item.itemType === "group" && item.caption === "String Field Details") && InitNewRowStarted) {

            if (selectedType === "String" ) {
                item.visible = true;
             
            } else {
                item.visible = false;
            }
        }

        if ((item &&
            item.itemType === "group" &&
            item.caption === "Byte Field Details") && InitNewRowStarted) {
         
            if (selectedType === "Byte") {
             
                item.visible = true;
             
            } else {
                item.visible = false;
            }
        }

        if ((item &&
            item.itemType === "group" &&
            item.caption === "Integer Field Details") && InitNewRowStarted) {
         
            if (selectedType === "Integer") {
             
                item.visible = true;
             
            } else {
                item.visible = false;
            }
        }
        if ((item &&
            item.itemType === "group" &&
            item.caption === "Double Field Details") && InitNewRowStarted) {
         
            if (selectedType === "Double") {
             
                item.visible = true;
             
            } else {
                item.visible = false;
            }
        }
        if ((item &&
            item.itemType === "group" &&
            item.caption === "Decimal Field Details") && InitNewRowStarted) {
         
            if (selectedType === "Decimal") {
             
                item.visible = true;
             
            } else {
                item.visible = false;
            }
        }
        if ((item &&
            item.itemType === "group" &&
            item.caption === "Long Field Details") && InitNewRowStarted) {

            if (selectedType === "Long") {

                item.visible = true;

            } else {
                item.visible = false;
            }
        }

        if ((item &&
            item.itemType === "group" &&
            item.caption === "Bool Field Details") && InitNewRowStarted) {

            if (selectedType === "Bool") {

                item.visible = true;

            } else {
                item.visible = false;
            }
        }


        if ((item &&
            item.itemType === "group" &&
            item.caption === "Enum Field Details") && InitNewRowStarted) {

            if (selectedType === "Enum") {

                item.visible = true;

            } else {
                item.visible = false;
            }
        }
        if ((item &&
            item.itemType === "group" &&
            item.caption === "DateOnly Field Details") && InitNewRowStarted) {

            if (selectedType === "DateOnly") {

                item.visible = true;

            } else {
                item.visible = false;
            }
        }
        if ((item &&
            item.itemType === "group" &&
            item.caption === "Time Field Details") && InitNewRowStarted) {

            if (selectedType === "Time") {

                item.visible = true;

            } else {
                item.visible = false;
            }
        }

        if ((item &&
            item.itemType === "group" &&
            item.caption === "DateTime Field Details") && InitNewRowStarted) {

            if (selectedType === "DateTime") {

                item.visible = true;

            } else {
                item.visible = false;
            }
        }

        if ((item &&
            item.itemType === "group" &&
            item.caption === "RelationElement Field Details") && InitNewRowStarted) {

            if (selectedType === "RelationElement") {

                item.visible = true;

            } else {
                item.visible = false;
            }
        }

        if ((item &&
            item.itemType === "group" &&
            item.caption === "ComplexTypeElement Field Details") && InitNewRowStarted) {

            if (selectedType === "ComplexTypeElement") {

                item.visible = true;

            } else {
                item.visible = false;
            }
        }
        if ((item &&
            item.itemType === "group" &&
            item.caption === "DetailElement Field Details") && InitNewRowStarted) {

            if (selectedType === "DetailElement") {

                item.visible = true;

            } else {
                item.visible = false;
            }
        }

        if ((item &&
            item.itemType === "group" &&
            item.caption === "DetailElement Field Details") && InitNewRowStarted) {

            if (selectedType === "DetailElement") {

                item.visible = true;

            } else {
                item.visible = false;
            }
        }
        if ((item &&
            item.itemType === "group" &&
            item.caption === "Measurement Field Details") && InitNewRowStarted) {

            if (selectedType === "Measurement") {

                item.visible = true;

            } else {
                item.visible = false;
            }
        }
        

        var dataGrid = $("#FieldGrid").dxDataGrid("instance");
        if (
            (item &&
                item.itemType === "group" &&
                item.caption === "String Field Details") && !InitNewRowStarted 
        ) {
        
            var index1 = dataGrid.getRowIndexByKey(rowKey) || 0;
            var type1 = dataGrid.cellValue(index1, "Type");
       
            if (type1 === 0) {
                item.visible = true;
            } else {
                item.visible = false;
            }
        }

        if (
            (item &&
                item.itemType === "group" &&
                item.caption === "Byte Field Details") && !InitNewRowStarted
        ) {
           // var dataGrid2 = $("#FieldGrid").dxDataGrid("instance");
            var index2 = dataGrid.getRowIndexByKey(rowKey) || 0;
            var type2 = dataGrid.cellValue(index2, "Type");

            if (type2 === 1) {
                item.visible = true;
            } else {
                item.visible = false;
            }

        }

        if (
            (item &&
                item.itemType === "group" &&
                item.caption === "Integer Field Details") && !InitNewRowStarted
        ) {
            // var dataGrid2 = $("#FieldGrid").dxDataGrid("instance");
            var index22 = dataGrid.getRowIndexByKey(rowKey) || 0;
            var type22 = dataGrid.cellValue(index22, "Type");

            if (type22 === 2) {
                item.visible = true;
            } else {
                item.visible = false;
            }

        }

        if (
            (item &&
                item.itemType === "group" &&
                item.caption === "Double Field Details") && !InitNewRowStarted
        ) {
            
            var index3 = dataGrid.getRowIndexByKey(rowKey) || 0;
            var type3 = dataGrid.cellValue(index3, "Type");

            if (type3 === 3) {
                item.visible = true;
            } else {
                item.visible = false;
            }

        }

        if (
            (item &&
                item.itemType === "group" &&
                item.caption === "Decimal Field Details") && !InitNewRowStarted
        ) {

            var index7 = dataGrid.getRowIndexByKey(rowKey) || 0;
            var type7 = dataGrid.cellValue(index7, "Type");

            if (type7 === 4) {
                item.visible = true;
            } else {
                item.visible = false;
            }

        }

        if (
            (item &&
                item.itemType === "group" &&
                item.caption === "Long Field Details") && !InitNewRowStarted
        ) {

            var index77 = dataGrid.getRowIndexByKey(rowKey) || 0;
            var type77 = dataGrid.cellValue(index77, "Type");

            if (type77 === 5) {
                item.visible = true;
            } else {
                item.visible = false;
            }

        }

        if (
            (item &&
                item.itemType === "group" &&
                item.caption === "Bool Field Details") && !InitNewRowStarted
        ) {
            
            var index4 = dataGrid.getRowIndexByKey(rowKey) || 0;
            var type4 = dataGrid.cellValue(index4, "Type");

            if (type4 === 6) {
                item.visible = true;
            } else {
                item.visible = false;
            }

        }

        if (
            (item &&
                item.itemType === "group" &&
                item.caption === "Enum Field Details") && !InitNewRowStarted
        ) {
            
            var index5 = dataGrid.getRowIndexByKey(rowKey) || 0;
            var type5 = dataGrid.cellValue(index5, "Type");

            if (type5 === 7) {
                item.visible = true;
            } else {
                item.visible = false;
            }
        }

        if (
           ( item &&
                item.itemType === "group" &&
                item.caption === "DateOnly Field Details") && !InitNewRowStarted
        ) {
            
            var index88 = dataGrid.getRowIndexByKey(rowKey) || 0;
            var type88 = dataGrid.cellValue(index88, "Type");

            if (type88 === 8) {
                item.visible = true;
            } else {
                item.visible = false;
            }

        }
        if (
            (item &&
                item.itemType === "group" &&
                item.caption === "Time Field Details") && !InitNewRowStarted
        ) {
            
            var index89 = dataGrid.getRowIndexByKey(rowKey) || 0;
            var type89 = dataGrid.cellValue(index89, "Type");

            if (type89 === 9) {
                item.visible = true;
            } else {
                item.visible = false;
            }

        }
        if (
            (item &&
                item.itemType === "group" &&
                item.caption === "DateTime Field Details") && !InitNewRowStarted
        ) {
            
            var index8 = dataGrid.getRowIndexByKey(rowKey) || 0;
            var type8 = dataGrid.cellValue(index8, "Type");

            if (type8 === 10) {
                item.visible = true;
            } else {
                item.visible = false;
            }

            }
        if (
            (item &&
                item.itemType === "group" &&
                item.caption === "RelationElement Field Details") && !InitNewRowStarted
        ) {
            
            var index6 = dataGrid.getRowIndexByKey(rowKey) || 0;
            var type6 = dataGrid.cellValue(index6, "Type");

            if (type6 === 11) {
                item.visible = true;
            } else {
                item.visible = false;
            }

            }

            if (
               ( item &&
                    item.itemType === "group" &&
                    item.caption === "ComplexTypeElement Field Details") && !InitNewRowStarted
            ) {
            
                var index66 = dataGrid.getRowIndexByKey(rowKey) || 0;
                var type66 = dataGrid.cellValue(index66, "Type");

                if (type66 === 12) {
                    item.visible = true;
                } else {
                    item.visible = false;
                }

            }

            
            if (
               ( item &&
                    item.itemType === "group" &&
                    item.caption === "DetailElement Field Details") && !InitNewRowStarted
            ) {
            
                var index60 = dataGrid.getRowIndexByKey(rowKey) || 0;
                var type60 = dataGrid.cellValue(index60, "Type");

                if (type60 === 13) {
                    item.visible = true;
                } else {
                    item.visible = false;
                }

            }

            if (
               ( item &&
                    item.itemType === "group" &&
                    item.caption === "Measurement Field Details") && !InitNewRowStarted
            ) {
            
                var index18 = dataGrid.getRowIndexByKey(rowKey) || 0;
                var type18 = dataGrid.cellValue(index18, "Type");

                if (type18 === 14) {
                    item.visible = true;
                } else {
                    item.visible = false;
                }

            }

      
      

       
 

    }


</script>

<div class="min-vh-100">

    <div class="d-flex flex-column w-100 sticky-top">
        @{
            @Html.Partial("AddCardPartialView", Model.DrcCardViewModel)
            @Html.Partial("AddShadowCardPartialView", Model.DrcCardViewModel)

        }

        @if (Model.TotalSubdomainSize > 0)
        {
            <div class="ml-4">
                @Html.Partial("SubdomainBarPartialView", Model)
            </div>
        }

        @if (Model.TotalSubdomainSize > 0 && Model.DrcCardViewModel.SubdomainVersionId != 0)
        {
            bool locked = Model.IsSubdomainVersionLocked;

            <div class="dx-field-value ml-2 mt-2">
                @(Html.DevExtreme().DropDownButton()
                              .ID("AddCardandShadowDropDown")
                              .Icon("add")
                              .Disabled(locked)
                              .StylingMode(ButtonStylingMode.Outlined)
                              .FocusStateEnabled(false)
                              .DropDownOptions(options => options.Width(230))
                              .ShowArrowIcon(false)
                              .UseSelectMode(false)
                              .DataSource(new JS("fill"))
                              .DisplayExpr("name")
                              .OnItemClick("document_click")
                )
            </div>
        }
        else if (Model.TotalSubdomainSize < 1)
        {
            <p class=" text-lg-center align-content-center" id="addSubdomainAlert">To be able start design, you must start by adding a new subdomain to your project.. </p>
        }


    <script>
        var fill = [{
            id: 1,
            name: "Document",
            delay: { show: 0, hide: 500 }
        }, {
            id: 2,
            name: "Shadow Document",
            delay: { show: 0, hide: 300 }
        }];

        function document_click(e) {
            var a = e.itemData.id;
            if (a === 1) {
                AddClickHandler();
            }
            else if (a === 2) {
                shadowCardPopUp();
            }

        }
        function shadowCardPopUp() {
            var popup = $("#AddShadowCard-popup").dxPopup("instance");
            popup.option("contentTemplate", $("#Add-ShadowPopup-template"));
            popup.show();
        }

        function AddClickHandler() {
            $("#addCard").submit();
        }

    </script>

     
            <div class="flex-container d-flex flex-wrap ml-2 align-items-baseline ">


                @foreach (var property in Model.DrcCardViewModes)
                {
                    var IsDisabled = "";

                    if (Model.IsSubdomainVersionLocked)
                    {
                        IsDisabled = "disabled";
                    }
                   
                    Model.DrcCardViewModel = property;

                    <div class="card border-secondary  mb-3 mr-2 mt-2 d-flex" style="min-width: 28rem; max-width: 36rem;">
                        @if (property.MainCardId != null)
                        {
                            <div id="shadowcardheader" class="card-header  text-light border-secondary d-flex flex-column pb-5">

                                <div class="d-flex justify-content-between">
                                    <div> <h5 class="align-self-start">@property.DrcCardName</h5> <a class="align-self-start p-0">@property.SourceDrcCardPath</a></div>
                                    <div role="group">
                                        <button class="btn btn-secondary btn-circle btn-circle-xsm dx-icon-overflow" @IsDisabled data-toggle="dropdown"></button>
                                        <div class="dropdown-menu mt-1 ml-3 " aria-labelledby="btnGroupDrop1">
                                            <a class="dropdown-item cursor-pointer " onclick="OpenEditPage(@property.Id);" id="@property.Id">Edit</a>
                                            <a class="dropdown-item cursor-pointer" onclick="DeleteThisCard(@property.Id);" id="@property.Id">Delete</a>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        }
                        else
                        {
                            <div class="card-header  text-light bg-info border-secondary d-flex flex-wrap justify-content-between dx-word-wrap">
                                <div class="h5 d-flex">@property.DrcCardName</div>
                                <div role="group">
                                    <button class="btn btn-secondary btn-circle btn-circle-xsm dx-icon-overflow" @IsDisabled data-toggle="dropdown"></button>
                                    <div class="dropdown-menu mt-1 ml-3" aria-labelledby="btnGroupDrop1">
                                        <a class="dropdown-item cursor-pointer" onclick="OpenEditPage(@property.Id);" id="@property.Id">Edit</a>
                                        <a class="dropdown-item cursor-pointer" onclick="DeleteThisCard(@property.Id);" id="@property.Id">Delete</a>
                                        <a class="dropdown-item cursor-pointer" onclick="moveCardPopUp(@property.Id);" id="@property.Id">Move</a>
                                    </div>
                                </div>

                            </div>

                        }

                        <div class="card-body text-dark bg-light row m-0 p-0" style="min-height: 11rem">

                            <div class="bd-highlight bg-light col col-5 pr-0 pl-0">

                                @foreach (var responsibility in property.Responsibilities)
                                {
                                    <div class="border-bottom rounded-bottom m-0 p-0">
                                        @if (@responsibility.IsMandatory == true)
                                        {
                                            <div class="text-truncate pt-1 pb-1">
                                                <a class="text-danger pl-1">!</a>
                                                <a class=" pl-0 pr-2 text-dark " id="@("house" + responsibility.Id)">
                                                    @responsibility.Title
                                                </a>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="text-truncate pl-2 pr-2 pt-1 pb-1 text-dark" id="@("house" + responsibility.Id)">
                                                @responsibility.Title <br>
                                            </div>
                                        }

                                    </div>
                                    @(Html.DevExtreme().Popover()
                                                                                          .Target("#house" + responsibility.Id)
                                                                                          .ShowEvent("mouseenter")
                                                                                          .HideEvent("mouseleave").Width(280)
                                                                                          .ContentTemplate(@<text>
                                                                                            <h6>Title:</h6>
                                                                                            <span class="text-break"> @responsibility.Title </span>
                                                                                            <br>
                                                                                            <h6><br>Responsibility Definition:</h6>
                                                                                            <span class="text-break"> @responsibility.ResponsibilityDefinition </span>

                                                                                            <h6><br>Priority Order:</h6>
                                                                                            <span> @responsibility.PriorityOrder</span>
                                                                                            @if (@responsibility.ResponsibilityCollaborationCards.Count > 0)
                                                                                            {
                                                                                                <h6> Collaboration Cards:</h6>
                                                                                                @string.Join(", ", @responsibility.ResponsibilityCollaborationCards.Select(m => m.DrcCardName))
                                                                                            }






                                                                                        </text>)
                                                                                                                                                                                                                                                                                                                                                                                          .Position(a => a
                                                                                                                                                                                                                                                                                                                                                                                              .At(HorizontalAlignment.Center, VerticalAlignment.Bottom)
                                                                                                                                                                                                                                                                                                                                                                                              .My(HorizontalAlignment.Left, VerticalAlignment.Top)
                                                                                                                                                                                                                                                                                                                                                                                              .Collision(PositionResolveCollision.Fit, PositionResolveCollision.Flip)
                                                                                                                                                                                                                                                                                                                                                                                              .Offset(0, 2)
                                                                                                                                                                                                                                                                                                                                                                                          )
                                    )
                                }

                            </div>
                            <div class="bg-light border-right border-left rounded-left rounded-right col col-3 pr-0 pl-0">
                                @foreach (var Authorization in property.Authorizations)
                                {
                                    <div>
                                        <div class="p-1 text-dark">@Authorization.OperationName (<a class="small text-center text-dark">@string.Join(", ", Authorization.Roles.Select(r => r.RoleName))</a>)</div>
                                    </div>
                                }
                            </div>
                            <div class="bg-light col col-4 pl-0 pr-0">
                                @{
                                    var cardContainer = new List<DrcCard>();
                                    @foreach (var responsibility in property.Responsibilities)
                                    {
                                        foreach (var collaboration in responsibility.ResponsibilityCollaborationCards)
                                        {
                                            if (!cardContainer.Contains(collaboration))
                                            {
                                                cardContainer.Add(collaboration);
                                            }
                                        }

                                    }
                                    @foreach (var field in property.Fields)
                                    {
                                        if (!cardContainer.Contains(field.CollaborationCard) && field.CollaborationCard != null)
                                        {
                                            if (!field.IsShadowField)
                                            {
                                                cardContainer.Add(field.CollaborationCard);
                                            }

                                        }
                                    }
                                    foreach (var card in cardContainer)
                                    {
                                        <div class="p-1 text-dark border-bottom rounded-bottom">@card.DrcCardName</div>
                                    }
                                }
                            </div>

                        </div>


                        <div id="card-footer" class="border-top rounded-top card-footer  bg-transparent d-flex flex-wrap " style="min-height: 4rem">

                            @foreach (var field in property.Fields)
                            {

                                if (field.IsShadowField)
                                {
                                    <div id="@("field" + field.Id)" class="shadowcardheader text-light border-left border-right border-bottom rounded-bottom rounded-right p-1 m-1 ">

                                        @field.AttributeName

                                        @(Html.DevExtreme().Popover()
                                                                      .Target("#field" + field.Id)
                                                                      .ShowEvent("mouseenter")
                                                                      .HideEvent("mouseleave")
                                                                      .Position(Position.Bottom)
                                                                      .Width(270)
                                                                      .ContentTemplate(@<text>
                                                                        <h6>@field.Type <br></h6>
                                                                        @if (@field.CollaborationCard != null)
                                                                        {
                                                                            <h6> Collaboration Card:</h6>
                                                                            <span>@field.CollaborationCard.DrcCardName</span>
                                                                        }



                                                                    </text>))
                                    </div>
                                }
                                else
                                {
                                    <div id="@("field" + field.Id)" class=" text-dark border-left border-right border-bottom rounded-bottom rounded-right p-1 m-1 ">

                                        @field.AttributeName

                                        @(Html.DevExtreme().Popover()
                                                                      .Target("#field" + field.Id)
                                                                      .ShowEvent("mouseenter")
                                                                      .HideEvent("mouseleave")
                                                                      .Position(Position.Bottom)
                                                                      .Width(270)
                                                                      .ContentTemplate(@<text>
                                                                        <h6>@field.Type <br></h6>

                                                                        @if (@field.CollaborationCard != null)
                                                                        {
                                                                            <h6> Collaboration Card:</h6>
                                                                            <span>@field.CollaborationCard.DrcCardName</span>
                                                                        }

                                                                        @if (@field.Required == true)
                                                                        {
                                                                            <h6> Required</h6>
                                                                        }

                                                                        @if (@field.Unique == true)
                                                                        {
                                                                            <h6>Unique</h6>
                                                                        }

                                                                        @if (@field.MaxLength != 0)
                                                                        {
                                                                            <h6>MaxLength:</h6>
                                                                            <span>@field.MaxLength</span>
                                                                        }

                                                                        @if (@field.MinLength != 0)
                                                                        {
                                                                            <h6>MinLength:</h6>
                                                                            <span>@field.MinLength</span>
                                                                        }

                                                                        @if (@field.MaxValue != 0.0)
                                                                        {
                                                                            <h6>MaxValue:</h6>
                                                                            <span>@field.MaxValue</span>
                                                                        }

                                                                        @if (@field.MinValue != 0.0)
                                                                        {
                                                                            <h6>MinValue:</h6>
                                                                            <span>@field.MinValue</span>
                                                                        }

                                                                        @if (@field.CreditCard == true)
                                                                        {
                                                                            <h6>Credit Card</h6>

                                                                        }

                                                                        @if (@field.DefaultValue != null)
                                                                        {
                                                                            <h6>Default Value:</h6>
                                                                            <span>@field.DefaultValue</span>

                                                                        }
                                                                        @if (@field.RegularExpression != null)
                                                                        {
                                                                            <h6>RegularExpression:</h6>
                                                                            <span>@field.RegularExpression</span>

                                                                        }
                                                                        @*@if (@field.MeasurementType!=null)
                                                                        {
                                                                            <h6>MeasurementType:</h6>
                                                                            <span>@field.MeasurementType</span>

                                                                        }*@


                                                                    </text>))
                                    </div>
                                }

                            }

                        </div>


                        @using (Html.DevExtreme().NamedTemplate("Move-CardPopup-template" + property.Id))
                        {
                            @*@using (Html.BeginForm("MoveCardToDestinationSubdomain", "DrcCards", FormMethod.Post, new { currentSubdomainVersionId = @property.SubdomainVersionId }))
                            {*@


                            @(Html.DevExtreme().Form<DrcCardViewModel>()
                                          .OnFieldDataChanged("moveFieldDataChanged")
                                          .ID("MoveCardform")
                                          .FormData(Model.DrcCardViewModel)
                                          .LabelLocation(FormLabelLocation.Top)
                                          .ReadOnly(false)
                                          .ShowColonAfterLabel(true)
                                          .Items(formItems =>
                                          {
                                              formItems.AddSimpleFor(m => m.SubdomainVersionId)
                                                  .Editor(m => m.SelectBox()
                                                      .ShowClearButton(true)
                                                      .DataSource(d => d.Mvc()
                                                          .Controller("Subdomains")
                                                          .LoadAction("GetDropDownButtonSubdomains")
                                                          .Key("Id").LoadParams(new { Id = @property.SubdomainVersionId })).DisplayExpr("SubdomainName").ValueExpr("Id").OnSelectionChanged("moveSelectBoxChanged"));
                                              formItems.AddSimpleFor(m => m.DrcCardName).HelpText("You can update your document name before move..");
                                              formItems.AddSimpleFor(m => m.Id).CssClass("AdShadowCardId");

                                              formItems.AddButton()
                                                  .HorizontalAlignment(HorizontalAlignment.Right)
                                                  .ButtonOptions(b => b.Text("Move Document")
                                                      .ID("moveCardButton")
                                                      .Disabled(true)
                                                      .UseSubmitBehavior(true)
                                                      .OnClick("moveCardClickHandler")
                                                  );
                                          })

                            )

                            @*}*@


                        }

                        @using (Html.DevExtreme().NamedTemplate("Update-popup-template" + property.Id))
                        {
                            Model.DrcCardViewModel = property;
                            @(Html.DevExtreme().Form<DrcCardViewModel>()
                                 
                                                                                  .ElementAttr(new { style = "margin-top:-30px;" })
                                                                                  .FormData(Model.DrcCardViewModel)
                                                                                  .Items(formItems =>
                                                                                  {
                                                                                      formItems.AddSimple().Template(@<text> @Html.Partial("PartialCardNameGrid", property)
                                                                                    </text>);
                                                                                                                                                      formItems.AddGroup()
                                                                                                                                                          .Items(groupItem =>
                                                                                                                                                          {
                                                                                                                                                              groupItem.AddTabbed().TabPanelOptions(o =>
                                                                                                                                                              {
                                                                                                                                                                  o.ElementAttr(new { style = "margin-top:-14 c  px;" });
                                                                                                                                                                  o.DeferRendering(false);
                                                                                                                                                                  o.Height(590);
                                                                                                                                                                  o.AnimationEnabled(true);
                                                                                                                                                              }).Tabs(tabItem =>
                                                                                                                                                              {


                                                                                                                                                                  tabItem.Add().Title("RESPONSIBILITIES").Template(@<text>@Html.Partial("ResponsibilityUpdatePartial", property)</text>);
                                                                                                                                                                                                                                              tabItem.Add().Title("AUTHORIZATIONS").Template(@<text>@Html.Partial("AuthorizationDataGridUpdate", property)</text>);
                                                                                                                                                                                                                                                                                                                          tabItem.Add().Title("FIELDS").Template(@<text>@Html.Partial("FieldDataGridUpdatePartialView", property)
                                                                                                                                                                                                                                                                                                                        </text>);

                                                                                                                                                                                                                                                                                                                                                                                                  });
                                                                                                                                                                                                                                                                                                                                                                                              });
                                                                                                                                                                                                                                                                                                                                                                                      })

                            )
                        }


                        @using (Html.DevExtreme().NamedTemplate("Delete-popup-template" + property.Id))
                        {
                            Model.DrcCardViewModel = property;

                            <div class=" d-flex align-items-top flex-column mt-auto">
                                @if (Model.DrcCardViewModel.MainCardId != null)
                                {
                                    <div class="d-flex alert alert-primary" role="alert">
                                        *This is a Shadow Card. If you delete this card then you will lose all relations with this card!
                                    </div>

                                }

                                @(Html.DevExtreme().Form<DrcCardViewModel>()
                                              .ID("DeleteCardForm")
                                                                                      .FormData(property)
                                                                                      .Items(formItems =>
                                                                                      {
                                                                                          formItems.AddSimpleFor(m => m.DrcCardName).Editor(e => e.TextBox().Disabled(true));
                                                                                          formItems.AddSimpleFor(m => m.Id).CssClass("AdShadowCardId");
                                                                                          formItems.AddButton()
                                                                                              .HorizontalAlignment(HorizontalAlignment.Right)
                                                                                              .ButtonOptions(b => b.Text("Delete Document")
                                                                                                  .UseSubmitBehavior(true)
                                                                                                  .OnClick("deleteCardClickHandler")
                                                                                              );

                                                                                      })
                                )
                            </div>



                        }
                    </div>
                }
            </div>
    </div>
</div>


<div>

    @(Html.DevExtreme().Popup()
                                      .ID("Card-popup")
                                      .ElementAttr("class", "popup")
                                      .TitleTemplate(@<text>
                                        <div class="long-title text-light d-flex justify-content-center p-3"><h3>Update Document</h3></div>
                                        <div class="CloseButton pb-2 mb-5">
                                            @Html.DevExtreme().Button().Icon("close").OnClick("closeButton")
                                        </div>
                                    </text>)
                                                                                                              .Width(750)
                                                                                                              .Height(790)
                                                                                                              .ShowTitle(true)
                                                                                                              .Visible(false)
                                                                                                              .HoverStateEnabled(true)
                                                                                                              .DragEnabled(true)
                                                                                                              .CloseOnOutsideClick(false)

                                                                                                              .ShowCloseButton(true)


    )

    @(Html.DevExtreme().Popup()
                                     .ID("Card-delete-popup")
                                     .ElementAttr("class", "popup")
                                     .Width(500)
                                     .Height(350)
                                     .ShowTitle(true)
                                     .Title("Do you want to delete this Item?")
                                     .Visible(false)
                                     .DragEnabled(true)
                                     .CloseOnOutsideClick(false)

                                     .ShowCloseButton(true)
    )



    @(Html.DevExtreme().Popup()
                          .ID("Move-Document-Result")
                          .ElementAttr("class", "popup")
                          .Width(500)
                          .Height(350)
                          .ShowTitle(true)
                          .Title("Do you want to delete this Item?")
                          .Visible(false)
                          .DragEnabled(true)
                          .CloseOnOutsideClick(false)

                          .ShowCloseButton(true)
    )
    @(Html.DevExtreme().Popover()
                                     .ID("more-option")
                                     .ElementAttr("class", "popup")
                                     .Width(80)
                                     .Height(120)
                                     .CloseOnOutsideClick(false)
                                     .ShowCloseButton(true)
    )

    @(Html.DevExtreme().Popup()
                                      .ID("MoveCard-popup")
                                      .ElementAttr("class", "popup")
                                      .TitleTemplate(@<text>
                                        <div class="long-title text-light d-flex justify-content-center p-3">
                                            <h3>Subdomain Change</h3>
                                        </div>
                                        <div class="CloseButton">
                                            @(Html.DevExtreme().Button().Icon("close").OnClick("closeMoveDocumentPopUp"))
                                        </div>
                                    </text>)
                                                                                                              .Width(450)
                                                                                                              .Height(370)
                                                                                                              .ShowTitle(true)
                                                                                                              .Visible(false)
                                                                                                              .DragEnabled(true)
                                                                                                              .CloseOnOutsideClick(false)

                                                                                                              .ShowCloseButton(true)
    )

    @(Html.DevExtreme().LoadPanel()
                                  .ID("loadPanel")
                                  .CloseOnOutsideClick(false)


    )
</div>
<script>



    function addShadowClickHandler(e) {
        var a = $("#form").dxForm("instance");
        var form = a.option();
        var b = $("#dropDownSelectBox").dxSelectBox("instance");
        var value=b.option("selectedItem");
        if (form.formData.DrcCardName != null && value!=null) {

            if (form.formData.DrcCardName.length > 0) {
                $("#AddShadow").submit();
            } else {
                DevExpress.ui.notify("You can not leave document name empty!!", "error", 1500);
            }

        } else {

            DevExpress.ui.notify("You must select a source document!!", "error", 1500);
        }

    }
    function moveFieldDataChanged(e) {
        var a = $("#MoveCardform").dxForm("instance");
        var form = a.option();

        if (form.formData.DrcCardName === "") {
            $("#moveCardButton").dxButton("instance").option("disabled", true);
        } else {
            $("#moveCardButton").dxButton("instance").option("disabled", false);
        }




    }
    function moveSelectBoxChanged(e) {
        if (e.selectedItem == null) {
            $("#moveCardButton").dxButton("instance").option("disabled", true);
        } else {
            $("#moveCardButton").dxButton("instance").option("disabled", false);
        }
    }

    function deleteCardClickHandler() {
        var a = $("#DeleteCardForm").dxForm("instance").option("formData");
        var jsonData = JSON.stringify(a);

        $.ajax({
            url: '/DrcCards/Delete/',
            data: jsonData,
            contentType: 'application/json',
            processData: false,
            type: 'POST',
            success: function (data) {
                if (data !== null) {
                    window.location.href = "/DrcCards/index?id=" + @Model.DrcCardViewModel.SubdomainVersionId;
                    DevExpress.ui.notify(" Your document successfully deleted", "success", 3500);

                    $("#loadPanel").dxLoadPanel("show");

                }
            },
            failure: function (response) {
                DevExpress.ui.notify(" Your document delete operation failed", "error", 3500);

            },
            error: function (response) {;
                alert("Please delete the shadows of this document. You have fallowing shadows of this document;"+response.responseText);
            }
        });

        closeDeleteDocumentPopUp();
    }

    function closeDeleteDocumentPopUp() {

        $("#Card-delete-popup").dxPopup({
            visible: false
        });
    }
    function moveCardClickHandler() {

      //  $("#MoveCard").submit();
        var a = $("#MoveCardform").dxForm("instance").option("formData");
        var jsonData = JSON.stringify(a);

      $.ajax({
          url: '/DrcCards/MoveCardToDestinationSubdomain/',
          data: jsonData,
          contentType: 'application/json',
          processData: false,
          type: 'POST',
          success: function (data) {

              if (data !== null) {
                  DevExpress.ui.notify(" Your document successfully moved", "success", 3500);

              }
          },
          failure: function (response) {
              DevExpress.ui.notify(response.status +" ( "+ response.statusText+" )"+"  "+ response.responseText, "error", 2500);

          },
          error: function (response) {
              alert(response.responseText);
          }
      });



      closeMoveDocumentPopUp();
    }
    function closeMoveDocumentPopUp() {

        $("#MoveCard-popup").dxPopup({
            visible: false
        });
    }

    function closeButton() {

        $("#Card-popup").dxPopup({
            visible: false

        });
        $("#loadPanel").dxLoadPanel("show");
        window.location.href = "/DrcCards/index?id=" + @Model.DrcCardViewModel.SubdomainVersionId;
    }

    function customizeAuthorizationDisplayText(cell, info) {
        var rowData = info.row.data;
        if (!rowData)
            return;

        var texts = [];
        if (rowData.RoleIds && rowData.RoleIds.length) {
            for (var i = 0; i < rowData.RoleIds.length; i++) {
                var value = rowData.RoleIds[i];
                var displayText = info.column.lookup.calculateCellValue(value);


                if (displayText)
                    texts.push(displayText);
            }
        }
        cell.append(texts.toString());

    };

    function customizeDisplayText(cell, info) {
        var rowData = info.row.data;

        if (!rowData)
            return;
        var texts = [];
        if (rowData.ShadowCardIds && rowData.ShadowCardIds.length) {
            for (var i = 0; i < rowData.ShadowCardIds.length; i++) {
                var value = rowData.ShadowCardIds[i];
                var displayText = info.column.lookup.calculateCellValue(value);
                if (displayText)
                    texts.push(displayText);
            }
        }
        cell.append(texts.toString());
    };

    function OpenEditPage(data) {
        var popup = $("#Card-popup").dxPopup("instance");
        popup.option("contentTemplate", $("#Update-popup-template" + data));
        popup.show();
    }
    function DeleteThisCard(data) {
        var popup = $("#Card-delete-popup").dxPopup("instance");
        popup.option("contentTemplate", $("#Delete-popup-template" + data));
        popup.show();
    }

    function moveCardPopUp(data) {
        var popup = $("#MoveCard-popup").dxPopup("instance");
        popup.option("contentTemplate", $("#Move-CardPopup-template" + data));
        popup.show();
    }


    function eds(e) {
    

    }


    function es(rowData, value) {
        this.defaultSetCellValue(rowData, value);
    }

</script>