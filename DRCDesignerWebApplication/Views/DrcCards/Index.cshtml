
@using DRCDesignerWebApplication.Controllers.ViewModels
@using Microsoft.EntityFrameworkCore
@model DRCDesignerWebApplication.Controllers.ViewModels.DrcCardViewModel;

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = "_CardPageLayout";
}

<style>


    .buttonGroupOfCard1 {
        display: flex;
        justify-content: flex-end;
    }

    .Card-delete {
        display: flex;
        justify-content: flex-end;
    }

    .caption {
        font-size: 16px;
        padding-bottom: 3px;
        padding-left: 10px;
    }
    .container-fluid {
        margin-left: 15px;
    }
  
    .container-fluid .card .card-footer {
        display: flex;
        flex-flow: row wrap;
    }
    .flex-container {
        display: flex;
        flex-direction: column;
        margin-right: -40px;
        margin-left: -15px;
    }
  
    .flex-container #SecondPartialView {
            margin-top: -28px;
        }
  
    .container-fluid .card .card-body {
        display: flex;
        flex-flow: row wrap;
        flex-direction: column;
    }

    .container-fluid .card .card-footer > div {
        margin: 5px;
    }

    .container-fluid .card .card-body > div {
        margin: 5px;
    }
</style>

<div class="container-fluid d-flex flex-wrap">
@{
    var tempModel = Model;
    tempModel.DrcCard.DrcCardName = null;
    <div class="flex-container">
    
        <div id="FirstPartialView">@Html.Partial("AddCardPartialView", tempModel)</div>
        <div id="SecondPartialView">@Html.Partial("AddShadowCardPartialView", tempModel)</div>
    </div>
}


@foreach (var property in Model.DrsCards)
{
    <div class="card border-success mb-3 mr-2 mt-2" style="min-width: 20rem;">

    <div class="card-header bg-transparent border-success">@property.DrcCardName</div>
    <div class="card-body d-flex flex-row p-0" style="min-height: 10rem">


        <div class="bd-highlight border-right" style="flex: 5">
            @foreach (var responsibility in property.Responsibilities)
            {
                <div>@responsibility.ResponsibilityDefinition</div>

            }

        </div>

        <div class="bd-highlight border-right " style="flex: 2">
            @foreach (var Authorization in property.Authorizations)
            {
                <div>@Authorization.OperationName</div>

            }
        </div>


        <div class="bd-highlight border-right " style="flex: 3">collobration</div>

    </div>


    <div class="card-footer bg-transparent border-success ">
        @foreach (var field in property.Fields)
        {
            <div>@field.AttributeName</div>

        }
    </div>

    <div class="buttonGroupOfCard1">
        @(Html.DevExtreme().Button()
              .Icon("edit")
              .Width(40)
              .OnClick(@<text>
                           function showInfo(data) {
                           var popup = $("#Card-popup").dxPopup("instance");
                           popup.option("contentTemplate", $("#Update-popup-template"+ @property.Id));
                           popup.show();
                           }
                        </text>)
              )
        @(Html.DevExtreme().Button()
              .Icon("trash")
              .Width(40).OnClick(@<text>
                                     function showInfo(data) {
                                     var popup = $("#Card-delete-popup").dxPopup("instance");
                                     popup.option("contentTemplate", $("#Delete-popup-template"+ @property.Id));
                                     popup.show();
                                     }
                                  </text>)
              )


    </div>

    @using (Html.DevExtreme().NamedTemplate("Update-popup-template" + property.Id))
    {

        Model.DrcCard = property;

        @using (Html.BeginForm("Post", "DrcCards", FormMethod.Post, new {id = "editCard"}))
         {

             @Html.HiddenFor(m => m.DrcCard.SubdomainId)
             @Html.HiddenFor(m => m.DrcCard.Id)
             
             @(Html.DevExtreme().Form<DrcCardViewModel>()

               .ValidationGroup("DrcCardUpdate")
               .FormData(Model)

               .Items(formItems =>
               {

               formItems.AddGroup()

                       .Items(groupItem =>
                       {
                           groupItem.AddSimpleFor(m => m.DrcCard.DrcCardName)
                               .IsRequired(true).Editor(e => e
                                   .TextBox()
                                   .Width("35%")

                               );
                       });

               formItems.AddGroup()
                       .Items(groupItem =>
                       {
                       groupItem.AddTabbed().TabPanelOptions(o =>
                       {
                           o.DeferRendering(false);
                           o.Height(425);
                           o.AnimationEnabled(true);
                       }).Tabs(tabItem =>
                       {
                       tabItem.Add().Title("RESPONSIBILITIES").Template(@<text>
                                                                                        @( Html.DevExtreme().DataGrid<Responsibility>()
                                                                                               .Height(352)
                                                                                               .DataSource(property.Responsibilities)
                                                                                               .ID("gridResponsibility")
                                                                                               .ShowBorders(true)
                                                                                               .Editing(s => s.AllowUpdating(true).AllowAdding(true).AllowDeleting(true))
                                                                                               //.KeyExpr(new string[] { "Id" })
                                                                                               // .DataSource(new JS("[]"))
                                                                                               .Columns(columns =>
                                                                                               {
                                                                                                   //columns.AddFor(m => m.Id).Visible(false);
                                                                                                   columns.AddFor(m => m.Title);
                                                                                                   columns.AddFor(m => m.ResponsibilityDefinition);
                                                                                                   
                                                                                                   
                                                                                               })
                                                                                               .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual))
                                                                                              )
                                                                                     </text>);

                                   tabItem.Add().Title("AUTHORIZATIONS").Template(@<text>
                                                                                      @(Html.DevExtreme().DataGrid<Authorization>()
                                                                                            .Height(352)
                                                                                            .DataSource(property.Authorizations)
                                                                                            .ID("gridAuthorization")
                                                                                            .ShowBorders(true)
                                                                                            .Editing(s => s.AllowUpdating(true).AllowAdding(true).AllowDeleting(true))
                                                                                            //.KeyExpr(new string[] { "Id" })
                                                                                            .Columns(columns =>
                                                                                            {
                                                                                                //columns.AddFor(m => m.Id);
                                                                                                columns.AddFor(m => m.OperationName);

                                                                                                //columns.AddFor(m => m.DrcCardId); add select
                                                                                            })
                                                                                            .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual)))
                                                                                   </text>);

                                   tabItem.Add().Title("FIELDS").Template(@<text>
                                                                              @(Html.DevExtreme().DataGrid<Field>()
                                                                                    .Height(352)
                                                                                    .DataSource(property.Fields)
                                                                                    .ID("gridField")
                                                                                    .ShowBorders(true)
                                                                                    .Editing(s => s.AllowUpdating(true).AllowAdding(true).AllowDeleting(true))
                                                                                    //.KeyExpr(new string[] { "Id" })

                                                                                    .Columns(columns =>
                                                                                    {
                                                                                        //columns.AddFor(m => m.Id);
                                                                                        columns.AddFor(m => m.AttributeName);

                                                                                        //columns.AddFor(m => m.DrcCardId); add select
                                                                                    })
                                                                                    .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual)))
                                                                           </text>);


                               });
                           });






                   })


                   )
             <div class="submitButton">
                 @(Html.DevExtreme().Button()
                       .Text("Update Card")
                       .ValidationGroup("DrcCardUpdate")
                       .OnClick("clickHandler")
                       .UseSubmitBehavior(false)
                       )
             </div>

         }

    }
    @using (Html.DevExtreme().NamedTemplate("Delete-popup-template" + property.Id))
    {
        Model.DrcCard = property;
        @using (Html.BeginForm("Delete", "DrcCards", FormMethod.Post))
         {
             @Html.HiddenFor(m => m.DrcCard.SubdomainId)
             @Html.HiddenFor(m => m.DrcCard.Id)

             @(Html.DevExtreme().Form<DrcCardViewModel>()
                   .FormData(Model)
                   .ID("form")
                   .ColCount(2)
                   .Items(formItems =>
                   {
                       formItems.AddSimpleFor(m => m.DrcCard.DrcCardName).Editor(e => e.TextBox().Disabled(true));

                   }).ValidationGroup("card")
                   )

             // Validates the "employee" validation group and submits the "editEmployee" HTML form
             <div class="Card-delete">
                 @(Html.DevExtreme().Button()
                       .Text("Delete")
                       .ValidationGroup("card")
                       .UseSubmitBehavior(true)
                       )
             </div>

         }

    }
    </div>
}
</div>

@(Html.DevExtreme().Popup()
                              .ID("Card-popup")
                              .ElementAttr("class", "popup")

          .TitleTemplate(@<text>
            <div class="long-title"><h3>Update Card</h3></div>
            <div class="CloseButton">
                @(Html.DevExtreme().Button().Icon("close").OnClick("closeButton"))
            </div>
        </text>)
              .Width(750)
              .Height(700)
              .ShowTitle(true)
              .Visible(false)
              .DragEnabled(true)
              .CloseOnOutsideClick(false)
              .CloseOnBackButton(true)

              .ShowCloseButton(true)
)

@(Html.DevExtreme().Popup()
              .ID("Card-delete-popup")
              .ElementAttr("class", "popup")
              .Width(500)
              .Height(250)
              .ShowTitle(true)
              .Title("Do you want to delete this Item?")
              .Visible(false)
              .DragEnabled(true)
              .CloseOnOutsideClick(false)
              .CloseOnBackButton(true)
              .ShowCloseButton(true)
)



<script>

    function closeButton() {

        $("#Card-popup").dxPopup({
            visible: false
        });
    }

    function CreateResponsibilityInputElement(itemName, itemValue, itemIndex, container) {
        var $input = $("<input/>");

        $input.appendTo(container).attr({ type: "hidden", name: "Responsibilities[" + itemIndex + "]." + itemName }).val(itemValue);

    }

    function CreateAuthorizationInputElement(itemName, itemValue, itemIndex, container) {
        var $input = $("<input/>");

        $input.appendTo(container).attr({ type: "hidden", name: "Authorizations[" + itemIndex + "]." + itemName }).val(itemValue);

    }

    function CreateFieldInputElement(itemName, itemValue, itemIndex, container) {
        var $input = $("<input/>");

        $input.appendTo(container).attr({ type: "hidden", name: "Fields[" + itemIndex + "]." + itemName }).val(itemValue);

    }

    var isResponsibilityLoaded = false;
    var isResponsibilityRequested = false;
    var isAuthorizationLoaded = false;
    var isAuthorizationRequested = false;
    var isFieldLoaded = false;
    var isFieldRequested = false;
    
    function clickHandler(e) {
        if (e.validationGroup.validate().isValid) {

            if (!isResponsibilityRequested) {
                isResponsibilityRequested = true;
                $("#gridResponsibility").dxDataGrid("instance").getDataSource().load().done(function (items) {
                    for (var i = 0; i < items.length; i++) {
                        var item = items[i];
                        for (var property in item) {
                            if (item.hasOwnProperty(property)) {
                                CreateResponsibilityInputElement(property, item[property], i, $("#editCard")[0]);
                            }
                        }
                    }
                    isResponsibilityLoaded = true;
                    clickHandler(e);

                });
            }
            /////////////////////////////////////////////////////////////////////

            if (!isAuthorizationRequested) {
                isAuthorizationRequested = true;

                $("#gridAuthorization").dxDataGrid("instance").getDataSource().load().done(function (items) {
                    for (var i = 0; i < items.length; i++) {
                        var item = items[i];
                        for (var property in item) {
                            if (item.hasOwnProperty(property)) {
                                CreateAuthorizationInputElement(property, item[property], i, $("#editCard")[0]);
                            }
                        }
                    }
                    isAuthorizationLoaded = true;
                    clickHandler(e);

                });
            }

            ////////////////////////////////////////////////////////////////////////////////////


            if (!isFieldRequested) {
                isFieldRequested = true;

                $("#gridField").dxDataGrid("instance").getDataSource().load().done(function (items) {
                    for (var i = 0; i < items.length; i++) {
                        var item = items[i];
                        for (var property in item) {
                            if (item.hasOwnProperty(property)) {
                                CreateFieldInputElement(property, item[property], i, $("#editCard")[0]);
                            }
                        }
                    }
                    isFieldLoaded = true;
                    clickHandler(e);

                });
            }

            ////////////////////////////////////////////////////////////////////////////////////



            if (isResponsibilityLoaded && isAuthorizationLoaded && isFieldLoaded) {
                $("#editCard").submit();
                isResponsibilityLoaded = false;
                isResponsibilityRequested = false;
                isAuthorizationLoaded = false;
                isAuthorizationRequested = false;
                isFieldLoaded = false;
                isFieldRequested = false;

            } else {
                clickHandler(e);
            }


        }







    }

</script>